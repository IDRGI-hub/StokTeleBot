from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile

import logging

import app.keyboards as kb
from Parser.Parser import scrape_data
from config import CHAT_IDS
from Parser.excel_report import generate_excel_report
from Parser.Save_utils import save_stock_history
from Parser.db_utils import fetch_stock_by_date

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}, ChatId: {message.chat.id}', reply_markup=kb.main)
    
@router.message(F.text == '–ü–æ–º–æ—â—å')
async def cmd_help(message: Message):
    await message.reply(f'–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', reply_markup=kb.help)

@router.message(Command("get_stock"))
async def cmd_get_stock(message: Message):
    await message.answer("–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ... ‚è≥")
    
    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    results = await scrape_data()
    save_stock_history(results)
    data = fetch_stock_by_date()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = "üìä **–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:**\n\n"
    
    for product, stock in data.items():
        if isinstance(stock, dict):
            response += f"üîπ *{product}*\n"
            response += f"   üî∏ –í—Å–µ–≥–æ: {stock['total_stock']} —à—Ç.\n"
            response += f"   üî∏ –ö–æ–ª-–≤–æ —Å–∫–ª–∞–¥–æ–≤: {stock['warehouses']}\n"
            if stock["details"]:
                for warehouse, qty in stock["details"].items():
                    response += f"   üìç {warehouse}: {qty} —à—Ç.\n"
            response += "\n"
        else:
            response += f"üîπ *{product}* - {stock}\n\n"
    
    await message.answer(response, parse_mode="Markdown")

@router.callback_query(F.data == '/get_data')
async def cmd_get_data(callback: CallbackQuery):
    await callback.message.answer("–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ... ‚è≥")
    
    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    results = await scrape_data()
    save_stock_history(results)
    data = fetch_stock_by_date()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = "üìä **–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:**\n\n"
    
    for product, stock in data.items():
        if isinstance(stock, dict):
            response += f"üîπ *{product}*\n"
            response += f"   üî∏ –í—Å–µ–≥–æ: {stock['total_stock']} —à—Ç.\n"
            response += f"   üî∏ –ö–æ–ª-–≤–æ —Å–∫–ª–∞–¥–æ–≤: {stock['warehouses']}\n"
            if stock["details"]:
                for warehouse, qty in stock["details"].items():
                    response += f"   üìç {warehouse}: {qty} —à—Ç.\n"
            response += "\n"
        else:
            response += f"üîπ *{product}* - {stock}\n\n"
    
    await callback.message.answer(response, parse_mode="Markdown")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == '/get_messages')
async def cmd_subscribe(callback: CallbackQuery):
    user_id = str(callback.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
    if user_id not in CHAT_IDS:
        CHAT_IDS.append(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üì©")
    else:
        await callback.message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. ‚úÖ")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
    await callback.answer()

@router.callback_query(F.data == "compare_stock")
async def handle_compare_stock(callback: CallbackQuery):
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel-—Ç–∞–±–ª–∏—Ü—É...")

    try:
        path = generate_excel_report()
        file = FSInputFile(path)
        await callback.message.answer_document(document=file, caption="üßæ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤")
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
