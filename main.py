import asyncio
import logging
import aiocron
import json

from aiogram import Bot, Dispatcher

from config import TOKEN, CHAT_IDS
from app.hendlers import router
from Parser.Parser import scrape_data
from Parser.Save_utils import save_stock_history
from Parser.db_utils import fetch_stock_by_date

bot = Bot(TOKEN)
dp = Dispatcher()

async def send_daily_stock():
    logging.info("‚è≥ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")

    for chat_id in CHAT_IDS:
        await bot.send_message(chat_id=chat_id, text="‚è≥ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...", parse_mode="Markdown")
        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {chat_id}")

    results = await scrape_data()

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_stock_history(results)

    data = fetch_stock_by_date()

    response = "üìä **–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"

    for product, stock in data.items():
        if isinstance(stock, dict):
            response += f"üîπ *{product}*\n"
            response += f"   üî∏ –í—Å–µ–≥–æ: {stock['total_stock']} —à—Ç.\n"
            response += f"   üî∏ –ö–æ–ª-–≤–æ —Å–∫–ª–∞–¥–æ–≤: {stock['warehouses']}\n"
            if stock["details"]:
                for warehouse, qty in stock["details"].items():
                    response += f"   üìç {warehouse}: {qty} —à—Ç.\n"
            response += "\n"
        else:
            response += f"üîπ *{product}* - {stock}\n\n"

    for chat_id in CHAT_IDS:
        await bot.send_message(chat_id=chat_id, text=response, parse_mode="Markdown")
        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {chat_id}")

async def main():
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–µ
    aiocron.crontab("50 23 * * *", func=send_daily_stock),
    dp.include_router(router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot, polling_timeout = 5)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bye!")
